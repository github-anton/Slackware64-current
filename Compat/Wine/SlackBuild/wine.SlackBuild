#!/bin/sh

# Copyright 2011 David Woodfall
# Copyright 2017, 2018 Ermakov Anton
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR ''AS IS'' AND ANY EXPRESS OR IMPLIED
# WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO
# EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
# OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
# OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
# ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# For debug purpose
alias BEGINCOMMENT="if [ ]; then"
alias ENDCOMMENT="fi"

BUILD_W32=yes
BUILD_W64=yes
BUILD_STAGING=yes
APPLY_PATCHES=no

PRGNAM=${PRGNAM:-wine}
VERSION=${VERSION:-5.0}
TAG=${TAG:-ant}


if [ "$BUILD_STAGING" = "yes" ]; then
    STAGING='-staging'
fi

if [ "$BUILD_W32" = "yes" ] && [ "$BUILD_W64" = "yes" ]; then
    MULTILIB='-multilib'
fi

if [ -z "$ARCH" ]; then
  case "$( uname -m )" in
    i?86) ARCH=i486 ;;
    arm*) ARCH=arm ;;
       *) ARCH=$( uname -m ) ;;
  esac
fi

CWD=$(pwd)
TMP=${TMP:-/tmp/ant}
PKG=$TMP/package-$PRGNAM
OUTPUT=${OUTPUT:-/tmp}

BUILDREF=$TMP/ref-$PRGNAM-$VERSION$STAGING-$ARCH$MULTILIB

if ! [ -f $BUILDREF ]; then
    echo 1 > $BUILDREF
fi
BUILD=`cat $BUILDREF`

NUMJOBS=" -j$(expr `cat /proc/cpuinfo | grep processor | wc -l` + 1) "

# Some user reports indicate that wine and IE don't always get along
# and that this might fix it.  The wine team doesn't agree that it's
# the right thing to do, but it's your call.
IEFIX=${IEFIX:-NO}

# If your video card does not support hardware accelerated OpenGL,
# the run the script like:   OPENGL=NO ./wine.SlackBuild
OPENGL=${OPENGL:-YES}

if [ "$ARCH" = "i486" ]; then
  SLKCFLAGS="-O2 -march=i486 -mtune=i686"
  LIBDIRSUFFIX=""
elif [ "$ARCH" = "i686" ]; then
  SLKCFLAGS="-O2 -march=i686 -mtune=i686"
  LIBDIRSUFFIX=""
elif [ "$ARCH" = "x86_64" ]; then
  SLKCFLAGS="-O2 -fPIC"
  LIBDIRSUFFIX=""
else
  SLKCFLAGS="-O2"
  LIBDIRSUFFIX=""
fi


set -e

rm -rf $PKG $TMP/build-wine64 $TMP/build-wine32

# remove sources
rm -rf $TMP/$PRGNAM-$VERSION

mkdir -p $TMP $PKG $OUTPUT

cd $TMP
tar xvf $CWD/$PRGNAM-$VERSION.tar.xz

cd $PRGNAM-$VERSION


# Apply all patches if needed
if [ "$APPLY_PATCHES" = "yes" ]; then

patches=`find $CWD/patches -name "*.patch"`

for patch in $patches; do
    echo $patch
    patch -p1 < $patch || exit 1
done

fi


chown -R root:root .
find . \
 \( -perm 777 -o -perm 775 -o -perm 711 -o -perm 555 -o -perm 511 \) \
 -exec chmod 755 {} \; -o \
 \( -perm 666 -o -perm 664 -o -perm 600 -o -perm 444 -o -perm 440 -o -perm 400 \) \
 -exec chmod 644 {} \;


if [ "$BUILD_STAGING" = "yes" ]; then
    
    # Unpack Wine satging
    cd $TMP
    #rm -rf wine-staging-master
    rm -rf wine-staging-$VERSION
    #unzip $CWD/wine-staging-master-$VERSION.zip
    unzip $CWD/wine-staging-$VERSION.zip
    
    # Apply staging patches
    #cd wine-staging-master/patches
    cd wine-staging-$VERSION/patches
    ./patchinstall.sh DESTDIR=$TMP/$PRGNAM-$VERSION --all
fi


# If OPENGL=YES above, then enable opengl; otherwise, disable it.
if [ "$OPENGL" = "YES" ]; then
    do_opengl="with"
  else
    do_opengl="without"
fi


# Build Wine64 first.

if [ "$BUILD_W64" = "yes" ]; then
    mkdir -p $TMP/build-wine64
    cd $TMP/build-wine64

    CFLAGS="$SLKCFLAGS" \
    CXXFLAGS="$SLKCFLAGS" \
    CC="ccache gcc -m64" ../$PRGNAM-$VERSION/configure --enable-win64 --disable-tests \
        --prefix=/usr \
        --mandir=/usr/man \
        --docdir=/usr/doc/$PRGNAM$STAGING-$VERSION \
        --with-gnutls=yes \
        --${do_opengl}-opengl \
        --build=$ARCH-slackware-linux

    make depend
    make $NUMJOBS
    make install DESTDIR=$PKG
fi


# Then build Wine32.

if [ "$BUILD_W32" = "yes" ]; then
    mkdir -p $TMP/build-wine32
    cd $TMP/build-wine32

    CFLAGS="$SLKCFLAGS" \
    CXXFLAGS="$SLKCFLAGS" \
    CC="ccache gcc -m32" ../$PRGNAM-$VERSION/configure --disable-tests --with-wine64=$TMP/build-wine64 \
        --prefix=/usr \
        --mandir=/usr/man \
        --docdir=/usr/doc/$PRGNAM$STAGING-$VERSION \
        --with-gnutls=yes \
        --${do_opengl}-opengl \
        --build=$ARCH-slackware-linux

    make depend
    make $NUMJOBS
    make install DESTDIR=$PKG
fi


find $PKG | xargs file | grep -e "executable" -e "shared object" | grep ELF \
  | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null || true
  
find $PKG/usr/man -type f -exec gzip -9 {} \;
for i in $( find $PKG/usr/man -type l ) ; do ln -s $( readlink $i ).gz $i.gz ; rm $i ; done


cd $TMP/$PRGNAM-$VERSION
mkdir -p $PKG/usr/doc/$PRGNAM$STAGING-$VERSION
cp -a \
  ANNOUNCE AUTHORS COPYING.LIB LICENSE* README VERSION \
  $PKG/usr/doc/$PRGNAM$STAGING-$VERSION
cat $CWD/$PRGNAM.SlackBuild > $PKG/usr/doc/$PRGNAM$STAGING-$VERSION/$PRGNAM.SlackBuild

mkdir -p $PKG/install
cat $CWD/slack-desc | sed s/wine/$PRGNAM$STAGING$MULTILIB/ > $PKG/install/slack-desc
cat $CWD/doinst.sh > $PKG/install/doinst.sh

cd $PKG
/sbin/makepkg -l y -c n $OUTPUT/$PRGNAM$STAGING$MULTILIB-$VERSION-$ARCH-$BUILD$TAG.${PKGTYPE:-tgz}

echo `expr $BUILD + 1` > $BUILDREF

# Done
