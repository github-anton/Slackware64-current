#!/bin/sh

# Slackware build script for ffmpeg

# Copyright 2010-2017  Heinz Wiesinger, Amsterdam, The Netherlands
# Copyright 2017  Patrick J. Volkerding, Sebeka, MN, USA
# Copyright 2018  Ermakov Anton
# All rights reserved.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR ''AS IS'' AND ANY EXPRESS OR IMPLIED
# WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO
# EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
# OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
# OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
# ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# Originally written by core (eroc@linuxmail.org)
# Modified by Robby Workman <rworkman@slackbuilds.org>

# For debug purpose
alias BEGINCOMMENT="if [ ]; then"
alias ENDCOMMENT="fi"

PRGNAM=ffmpeg
VERSION=${VERSION:-4.2.1}
TAG=${TAG:-ant}
OUT=${OUT:-/tmp}

if [ -z "$ARCH" ]; then
  case "$( uname -m )" in
    i?86) ARCH=i586 ;;
    arm*) ARCH=arm ;;
       *) ARCH=$( uname -m ) ;;
  esac
fi

CWD=$(pwd)
TMP=${TMP:-/tmp/$TAG}
PKG=$TMP/package-$PRGNAM
Y=${Y:-yes}
N=${N:-no}

NUMJOBS=" -j$(expr `cat /proc/cpuinfo | grep processor | wc -l` + 1) "

BUILDREF=$TMP/ref-$PRGNAM-$VERSION-$ARCH

if ! [ -f $BUILDREF ]; then
    echo 1 > $BUILDREF
fi
BUILD=`cat $BUILDREF`

if [ "$ARCH" = "i586" ]; then
  SLKCFLAGS="-O2 -march=i586 -mtune=i686"
  LIBDIRSUFFIX=""
elif [ "$ARCH" = "i686" ]; then
  SLKCFLAGS="-O2 -march=i686 -mtune=i686"
  LIBDIRSUFFIX=""
elif [ "$ARCH" = "x86_64" ]; then
  SLKCFLAGS="-O2 -fPIC"
  LIBDIRSUFFIX="64"
else
  SLKCFLAGS="-O2"
  LIBDIRSUFFIX=""
fi

# BEGINCOMMENT

# Configure ffmpeg features not autodetected by default.
# You can enable a lot of optional (not-autodetected) features by
# passing variables to the script (VAR=yes/no ./ffmpeg.SlackBuild).
# Unfortunately ffmpeg's configure doesn't support --enable-feature=yes
# syntax, so we have to do it the complicated way :/
# Additional optional (autodetected) dependencies are:
# - jack-audio-connection-kit
# - libva
# - libvdpau
# - libX11
# - libxcb
# - sdl2
# - xz
# - zlib

X264="yes"      ; libx264=      && [ "$X264" = "$Y" ]       && libx264="--enable-libx264"
CELT="no"       ; libcelt=      && [ "$CELT" = "$Y" ]       && libcelt="--enable-libcelt"
DC1394="no"     ; libdc1394=    && [ "$DC1394" = "$Y" ]     && libdc1394="--enable-libdc1394"
FREI0R="no"     ; libfrei0r=    && [ "$FREI0R" = "$Y" ]     && libfrei0r="--enable-frei0r"
GSM="no"        ; libgsm=       && [ "$GSM" = "$Y" ]        && libgsm="--enable-libgsm"
RTMP="no"       ; librtmp=      && [ "$RTMP" = "$Y" ]       && librtmp="--enable-librtmp"
SCHROEDINGER="no"   ; dirac_fast= && [ "$SCHROEDINGER" = "$Y" ] && dirac_fast="--enable-libschroedinger"
SPEEX="no"      ; libspeex=     && [ "$SPEEX" = "$Y" ]      && libspeex="--enable-libspeex"
XVID="no"       ; libxvid=      && [ "$XVID" = "$Y" ]       && libxvid="--enable-libxvid"
ASS="no"        ; libass=       && [ "$ASS" = "$Y" ]        && libass="--enable-libass"
OPENAL="no"     ; libopenal=    && [ "$OPENAL" = "$Y" ]     && libopenal="--enable-openal"
IEC61883="no"   ; libiec61883=  && [ "$IEC61883" = "$Y" ]   && libiec61883="--enable-libiec61883"
ILBC="no"       ; libilbc=      && [ "$ILBC" = "$Y" ]       && libilbc="--enable-libilbc"
MODPLUG="no"    ; libmodplug=   && [ "$MODPLUG" = "$Y" ]    && libmodplug="--enable-libmodplug"
OPUS="no"       ; libopus=      && [ "$OPUS" = "$Y" ]       && libopus="--enable-libopus"
TWOLAME="no"    ; libtwolame=   && [ "$TWOLAME" = "$Y" ]    && libtwolame="--enable-libtwolame"
LADSPA="no"     ; ladspa=       && [ "$LADSPA" = "$Y" ]     && ladspa="--enable-ladspa"
FLITE="no"      ; libflite=     && [ "$FLITE" = "$Y" ]      && libflite="--enable-libflite"
VIDSTAB="no"    ; libvidstab=   && [ "$VIDSTAB" = "$Y" ]    && libvidstab="--enable-libvidstab"
X265="yes"      ; libx265=      && [ "$X265" = "$Y" ]       && libx265="--enable-libx265"
ZVBI="no"       ; libzvbi=      && [ "$ZVBI" = "$Y" ]       && libzvbi="--enable-libzvbi"
OPENCV="no"     ; libopencv=    && [ "$OPENCV" = "$Y" ]     && libopencv="--enable-libopencv"
GME="no"        ; libgme=       && [ "$GME" = "$Y" ]        && libgme="--enable-libgme"
SNAPPY="no"     ; libsnappy=    && [ "$SNAPPY" ="$Y" ]      && libsnappy="--enable-libsnappy"
ZMQ="no"        ; libzmq=       && [ "$ZMQ" = "$Y" ]        && libzmq="--enable-libzmq"
BS2B="no"       ; libbs2b=      && [ "$BS2B" = "$Y" ]       && libbs2b="--enable-libbs2b"
EBUR128="no"    ; libebur128=   && [ "$EBUR128" = "$Y" ]    && libebur128="--enable-libebur128"
RUBBERBAND="no" ; librubberband= && [ "$RUBBERBAND" = "$Y" ] && rubberband="--enable-librubberband"
TESSERACT="no"  ; tesseract=    && [ "$TESSERACT" = "$Y" ]  && tesseract="--enable-libtesseract"
NETCDF="no"     ; netcdf=       && [ "$NETCDF" = "$Y" ]     && netcdf="--enable-netcdf"
CHROMAPRINT="no"; chromaprint=  && [ "$CHROMAPRINT" = "$Y" ] && chromaprint="--enable-chromaprint"
OPENCORE="no"   ; opencore_amr= && [ "$OPENCORE" = "$Y" ]   && opencore_amr="--enable-libopencore-amrnb
                                                                             --enable-libopencore-amrwb"
FDK_AAC="no"    ; fdk=          && [ "$FDK_AAC" = "$Y" ]    && { fdk="--enable-libfdk-aac" ; \
                                                                 non_free="--enable-nonfree" ; }
OPENSSL="no"    ; ssl=          && [ "$OPENSSL" = "$Y" ]    && { ssl="--enable-openssl" ; \
                                                                 non_free="--enable-nonfree" ; }
DECKLINK="no"   ; decklink=     && [ "$DECKLINK" = "$Y" ]   && { decklink="--enable-decklink" ; \
                                                    SLKCFLAGS="$SLKCFLAGS -I/usr/include/decklink" ; }

# Default enabled features:
FONTCONFIG="yes"; fontconfig=   && [ "$FONTCONFIG" = "$Y" ] && fontconfig="--enable-libfontconfig"
FREETYPE="yes"  ; freetype=     && [ "$FREETYPE" = "$Y" ]   && freetype="--enable-libfreetype"
FRIBIDI="yes"   ; fribidi=      && [ "$FRIBIDI" = "$Y" ]    && fribidi="--enable-libfribidi"
GNUTLS="yes"    ; gnutls=       && [ "$GNUTLS" = "$Y" ]     && gnutls="--enable-gnutls"
BLURAY="yes"    ; libbluray=    && [ "$BLURAY" = "$Y" ]     && libbluray="--enable-libbluray"
CACA="yes"      ; libcaca=      && [ "$CACA" = "$Y" ]       && libcaca="--enable-libcaca"
CDIO="yes"      ; libcdio=      && [ "$CDIO" = "$Y" ]       && libcdio="--enable-libcdio"
SSH="yes"       ; libssh=       && [ "$SSH" = "$Y" ]        && libssh="--enable-libssh"
THEORA="yes"    ; libtheora=    && [ "$THEORA" = "$Y" ]     && libtheora="--enable-libtheora"
V4L2="yes"      ; libv4l2=      && [ "$V4L2" = "$Y" ]       && libv4l2="--enable-libv4l2"
VORBIS="yes"    ; libvorbis=    && [ "$VORBIS" = "$Y" ]     && libvorbis="--enable-libvorbis"
VPX="yes"       ; libvpx=       && [ "$VPX" = "$Y" ]        && libvpx="--enable-libvpx"
WEBP="yes"      ; libwebp=      && [ "$WEBP" = "$Y" ]       && libwebp="--enable-libwebp"
LAME="yes"      ; mp3lame=      && [ "$LAME" = "$Y" ]       && mp3lame="--enable-libmp3lame"
OPENCL="yes"    ; opencl=       && [ "$OPENCL" = "$Y" ]     && opencl="--enable-opencl"
OPENGL="yes"    ; opengl=       && [ "$OPENGL" = "$Y" ]     && opengl="--enable-opengl"
JP2="yes"       ; openjpeg=     && [ "$JP2" = "$Y" ]        && openjpeg="--enable-libopenjpeg"
PULSEAUDIO="yes"; pulse=        && [ "$PULSEAUDIO" = "$Y" ]  && pulse="--enable-libpulse"
SAMBA="yes"     ; samba=        && [ "$SAMBA" = "$Y" ]      && samba="--enable-libsmbclient"
WAVPACK="yes"   ; wavpack=      && [ "$WAVPACK" = "$Y" ]    && wavpack="--enable-libwavpack"

# No default patent encumbered features:
AAC="no"        ; aac=          && [ "$AAC" = $N ]           && aac="--disable-encoder=aac"

rm -rf $TMP/$PKG
rm -rf $TMP/$PRGNAM-$VERSION
rm -rf $TMP/build-$PRGNAM

mkdir -p $TMP $PKG
cd $TMP
tar xvf $CWD/$PRGNAM-$VERSION.tar.xz || exit 1
cd $TMP/$PRGNAM-$VERSION || exit 1

chown -R root:root .
find -L . \
 \( -perm 777 -o -perm 775 -o -perm 750 -o -perm 711 -o -perm 555 \
  -o -perm 511 \) -exec chmod 755 {} \; -o \
 \( -perm 666 -o -perm 664 -o -perm 640 -o -perm 600 -o -perm 444 \
  -o -perm 440 -o -perm 400 \) -exec chmod 644 {} \;

# Fix linking with flite:
sed -i "s| -lflite\"| -lflite -lm -lasound\"|" \
  ./configure

mkdir $TMP/build-$PRGNAM
cd $TMP/build-$PRGNAM || exit 1
  
CFLAGS="$SLKCFLAGS" \
CXXFLAGS="$SLKCFLAGS" \
../$PRGNAM-$VERSION/configure \
  --prefix=/usr \
  --libdir=/usr/lib${LIBDIRSUFFIX} \
  --shlibdir=/usr/lib${LIBDIRSUFFIX} \
  --docdir=/usr/doc/$PKGNAM-$VERSION/html \
  --mandir=/usr/man \
  --disable-debug \
  --enable-shared \
  --disable-static \
  --enable-gpl \
  --enable-version3 \
  --enable-avresample \
  --arch=$ARCH \
  $non_free \
  $aac \
  $chromaprint \
  $decklink \
  $dirac_fast \
  $fdk \
  $fontconfig \
  $freetype \
  $fribidi \
  $gnutls \
  $ladspa \
  $libass \
  $libbluray \
  $libbs2b \
  $libcaca \
  $libcdio \
  $libcelt \
  $libdc1394 \
  $libebur128 \
  $libflite \
  $libfrei0r \
  $libgme \
  $libgsm \
  $libiec61883 \
  $libilbc \
  $libmodplug \
  $libopenal \
  $libopencv \
  $libopus \
  $librtmp \
  $libsnappy \
  $libspeex \
  $libssh \
  $libtheora \
  $libtwolame \
  $libv4l2 \
  $libvidstab \
  $libvorbis \
  $libvpx \
  $libwebp \
  $libx264 \
  $libx265 \
  $libxvid \
  $libzmq \
  $libzvbi \
  $mp3lame \
  $netcdf \
  $opencl \
  $opencore_amr \
  $opengl \
  $openjpeg \
  $pulse \
  $rubberband \
  $samba \
  $ssl \
  $tesseract \
  $wavpack || exit 1

make $NUMJOBS || make || exit 1
make install DESTDIR=$PKG || exit 1
make install-man DESTDIR=$PKG || exit 1

find $PKG -print0 | xargs -0 file | grep -e "executable" -e "shared object" | \
  grep ELF | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null || true

find $PKG/usr/man -type f -exec gzip -9 {} \;

mkdir -p $PKG/usr/doc/$PKGNAM-$VERSION/txt
cp -a \
  Changelog COPYING* CREDITS INSTALL* LICENSE* MAINTAINERS README* \
  RELEASE VERSION \
  $PKG/usr/doc/$PKGNAM-$VERSION
cp -a doc/*.txt $PKG/usr/doc/$PKGNAM-$VERSION/txt/
find . -name "RELEASE_NOTES" -exec cp -a {} $PKG/usr/doc/$PKGNAM-$VERSION/ \;

# If there's a ChangeLog, installing at least part of the recent history
# is useful, but don't let it get totally out of control:
if [ -r ChangeLog ]; then
  DOCSDIR=$(echo $PKG/usr/doc/${PKGNAM}-$VERSION)
  cat ChangeLog | head -n 1000 > $DOCSDIR/ChangeLog
  touch -r ChangeLog $DOCSDIR/ChangeLog
fi

mkdir -p $PKG/install
cat $CWD/slack-desc > $PKG/install/slack-desc

# ENDCOMMENT

cd $PKG
/sbin/makepkg -l y -c n $OUT/$PRGNAM-$VERSION-$ARCH-$BUILD$TAG.txz

echo `expr $BUILD + 1` > $BUILDREF

# remove sources
rm -rf $TMP/$PRGNAM-$VERSION

# Done
